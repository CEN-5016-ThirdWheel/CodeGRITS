[[{"l":"Getting Started"},{"i":"what-is-codegrits","l":"What is CodeGRITS?","p":["CodeGRITS stands for G aze R ecording & I DE T racking S ystem, which is a plugin specifically designed for SE researchers. CodeGRITS is built on top of IntelliJ’s SDK, with wide compatibility with the entire family of JetBrains IDEs to track developers’ IDE interactions and eye gaze data."]},{"l":"Key Features","p":["Gaze and IDE Recording: CodeGRITS records developers’ eye gaze data and IDE interactions.","Screen Recording: CodeGRITS records developers’ screen.","Research Toolkit: CodeGRITS provides a set of extra features for SE researchers, including preset labels, real-time data API, etc.","Data Export: CodeGRITS exports data in XML format for further analysis.","Real-time Data API: CodeGRITS provides real-time data API for further development."]},{"l":"Using CodeGRITS"},{"l":"Python Environment","p":["It is necessary to install the following packages in your python environment to run this plugin."]},{"l":"Installation","p":["Clone the repository to your local machine.","Open command line and run ./gradlew build in the root folder to build the plugin.","Open IntelliJ IDEA and click File- Settings- Plugins- Install Plugin from Disk... to install the plugin zip file in build/distributions folder.","Restart IntelliJ IDEA to enable the plugin.","All CodeGRITS features are available in Tools dropdown menu, including Start Tracking, Pause Tracking, and Configuration."]},{"l":"Usage","p":["Before starting tracking, you should first configure the plugin. Click Tools- CodeGRITS- Configuration to open the configuration window. To enable eye tracking, you need to have the necessary Python packages installed in your Python environment. The plugin automatically checks the Python environment.","We highly recommend using Tobii Pro Eye Tracker Manager to conduct calibration before using eye tracking.","Click Tools- CodeGRITS- Start Tracking to start tracking.","Click Tools- CodeGRITS- Pause Tracking to pause tracking.","Click Tools- CodeGRITS- Resume Tracking to resume tracking.","Click Tools- CodeGRITS- Stop Tracking to stop tracking. The plugin will export data in XML format to the configured folder."]},{"l":"Further Development","p":["Click Run- Run Plugin to run the plugin and test it.","Open command line and run ./gradlew build to build the plugin.","Get the plugin zip file in build/distributions folder."]}],[{"l":"Output Format"},{"l":"Output Directory Structure","p":["Comment:","[OUTPUT_DIR] is the output directory specified in the configuration.","[START_TIMESTAMP] is the timestamp when the tracking starts.","[ARCHIVE_TIMESTAMP] is the timestamp when the archive is triggered.","video_clip_[k].mp4 is the video clip of the screen recording from the (k-1)-th pause (0-th pause is start) to the k-th pause.","frames.csv records the timestamp and clip number of each frame in the video clip.","All the timestamps used by CodeGRITS are Unix time in milliseconds, starting from 1970-01-01 00:00:00 UTC.","The editor coordinate system(e.g., line, column) of IntelliJ Platform is start from 0."]},{"l":"IDE Tracking"},{"l":"XML Element Tree","p":["A real-time archive mechanism is implemented to track the state of the code file and console output at any timestamp during the development process. The file archive is triggered under two specific conditions: (1) When a file is opened or closed, or its selection changes; (2) When the content of the code in the main editor changes. The console archive is triggered when the console output changes (e.g., run class).","action","actions","All path attributes in the data start with / are relative to project_path, otherwise they are absolute paths. Sometimes the path is empty, which means the data is irrelevant to any file or not successfully tracked.","archive","archives","Attribute:","caret","Caret is the cursor in the code editor. The carets element records the change of the caret position in the code editor. The data including the timestamp, the path of the file, the line number, and the column number.","carets","character","CodeGRITS-related actions are also implemented as AnAction objects, and their id is prefixed with CodeGRITS, such as CodeGRITS.StartStopTracking, CodeGRITS.PauseResumeTracking, etc.","column","Comment:","Element: action","Element: actions","Element: archive","Element: archives","Element: caret","Element: carets","Element: environment","Element: file","Element: files","Element: ide_tracking","Element: mouse","Element: mouses","Element: selection","Element: selections","Element: typing","Element: typings","Element: visible_area Attribute:","Element: visible_areas","end_position: line:column","environment","Example:","file","files","height","id","id could be fileArchive or consoleArchive.","id could be fileOpened, fileClosed, or selectionChanged.","id could be mousePressed, mouseReleased, mouseClicked, mouseMoved, or mouseDragged.","id could only be caretPositionChanged.","id could only be selectionChanged.","id could only be visibleAreaChanged.","ide_name","ide_tracking","ide_version","If the file is not a code file, i.e., the file extension is not in the \".java\", \".cpp\", \".c\", \".py\", \".rb\", \".js\", or \".md\", NotCodeFile | Fail would be added to the remark. This is to prevent archiving data file with large size.","If there are IO errors when archiving the file, IOException | Fail would be added to the remark.","java_version","java_version will be replaced by python_version in PyCharm, etc.","line","mouse","mouses","new_path: only used in selectionChanged","old_path: only used in selectionChanged","os_name","Other IntelliJ plugins may also implement their own AnAction objects, which will also be tracked here. For example, the copilot.applyInlays in the GitHub Copilot plugin.","path","path: only used in fileArchive","path: only used in fileOpened/ fileClosed","project_name","project_path","remark could be fileOpened, fileClosed, fileSelectionChanged, contentChanged | OldFile, contentChanged | NewFile.","remark: only used in fileArchive","scale_x","scale_x and scale_y are used to calculate the real screen resolution based on the screen_size. In the example above, the real screen resolution is (1536*1.25, 864*1.25) = (1920, 1080).","scale_y","screen_size","selected_text","selection","selections","start_position: line:column","Sub-element:","Sub-element: action","Sub-element: archive","Sub-element: caret","Sub-element: file","Sub-element: mouse","Sub-element: selection","Sub-element: typing","Sub-element: visible_area","The \"add label\" action is also tracked here, with id as CodeGRITS.AddLabel.[LABEL_NAME], where label name is pre-set in the configuration.","The archived data is stored in the archives directory, with the name [ARCHIVE_TIMESTAMP].archive, where[ARCHIVE_TIMESTAMP] is the timestamp when the archive is triggered. Relevant information is stored in the archive element, including the timestamp, the path of the file, and the remark.","The change of x and y is usually caused by scrolling code editor, which could be used to track the horizontal and vertical scrolling respectively. The change of width and height is usually caused by resizing code editor, which could be used to track the horizontal and vertical resizing respectively.","The elements in actions are all the IDE-specific features, technically are all objects that implement the AnAction abstract class in IntelliJ IDEA. The range is diverse, from the basic editing features like EditorEnter, EditorBackSpace, clipboard features like EditorPaste, EditorCut, run features like RunClass, Stop, ToggleLineBreakpoint, Debug, navigating features like GotoDeclaration, Find, ShowIntentionActions, advanced IDE features like CompareTwoFiles, ReformatCode, to many others that cannot be fully listed here.","The files element records the file-related actions including opening, closing, and selection change. The data including the timestamp and the path of the file.","The mouses element records the mouse-related actions including pressing, releasing, clicking, moving, and dragging. The data including the timestamp, the path of the file, the x-coordinate, and the y-coordinate.","The root element of the ide_tracking.xml file.","The selections element records data when the user selects a piece of code in the code editor. The data including the timestamp, the path of the file, the start position, the end position, and the selected text.","The typings element records the typing action of the user in the code editor. The data including the character, the timestamp, the path of the file, the line number, and the column number.","The visible_areas element records the visible area of the code editor.","Thus, if you want to know the state of the code file at a specific timestamp, you can find the archive file with the largest timestamp that is smaller than the target timestamp.","timestamp","typing","typings","visible_area","visible_areas","width","x","x and y are the coordinates of the left-top corner of the visible area in code editor, relative to the left-top corner of the code editor including the invisible part (i.e., the line 0 and column 0). The unit of x, y, width, and height is measured by screen_size in the environment, not the actual screen resolution.","x and y are the coordinates relative to the screen_size in the environment, not the actual screen resolution.","y"]},{"l":"Eye Tracking","p":["ast_structure: only used when the gaze point cannot be mapped to location in the code editor, and the code file is java.","Attribute:","Collection of all gaze data.","column","Comment:","Element: ast_structure","Element: eye_tracking","Element: gaze","Element: gazes","Element: left_eye","Element: level","Element: location","Element: right_eye","Element: setting","end: line:column","Example:","eye_tracker","eye_tracker could be Mouse for simulation, or real Tobii Pro eye tracker device name (e.g., Tobii Pro Fusion), which is got from eyetracker.model in the tobii-research library.","gaze_point_x","gaze_point_x and gaze_point_y are the location on the screen, ranging from 0 to 1, where (0, 0) is the top-left corner of the screen, and (1, 1) is the bottom-right corner of the screen.","gaze_point_y","gaze_validity","gaze_validity and pupil_validity are the validity of the gaze point and pupil diameter, which is binary, 0 for invalid, 1 for valid. When using Mouse to simulate eye tracker, gaze_validity is always 1.0, and pupil_validity is always 0.0.","gazes","left_eye","line","line and column are the line number and column number of the gaze point in the code editor, which is calculated by xyToLogicalPosition(@NotNull Point p) method of Editor interface in IntelliJ Platform.","location: only used when the gaze point can be mapped to location in the code editor","path","pupil_diameter","pupil_diameter is the diameter of the pupil in mm, when using Mouse to simulate eye tracker, pupil_diameter is always 0.","pupil_validity","remark is used when the current token is same to the previous token, which means the gaze point is still in the same leaf node. In this case, the remark is Same (Last Successful AST). We designed this mechanism to avoid eye_tracking.xml to be too large.","remark: only used when the current token is same to the previous token","remark: only used when the gaze point cannot be mapped to location in the code editor","right_eye","sampling_rate","sampling_rate is the sampling rate of the eye tracker in Hz, which is pre-set in the configuration and whose range could be in eyetracker.get_all_gaze_output_frequencies() called in the tobii-research library.","setting","Since Tobii Pro SDK not support Java, we use Python library tobii-research to collect eye tracking data and use Java ProcessBuilder to call the Python script to collect data. The python interpreter is specified in the configuration.","start and end are the start and end position of the AST node level in the code file, which is calculated by psiElement.getTextRange().","start: line:column","Sub-element:","Sub-element: gaze","Sub-element: level: only used when the current token is different from the previous token","tag","tag is the type of the AST node level, which is calculated by psiElement.toString().","The abstract syntax tree (AST) of the code file is recorded in the ast_structure element. The AST is calculated by program structure interface (PSI) of IntelliJ Platform.","The code editor is founded, but the gaze point is out of the code editor. In this case, the remark is Fail | Out of Text Editor.","The code editor is not founded. In this case, the remark is Fail | No Editor.","The raw gaze point from the eye tracker is invalid. (i.e., nan). In this case, the remark is Fail | Invalid Gaze Point.","The root element of the eye_tracking.xml file. CodeGRITS support both Mouse simulation and Tobii Pro eye tracker devices.","timestamp","token","token is text of the leaf node in the AST of current gaze point, which is calculated by psiElement.getText().","type","type is the type of the leaf node, which is calculated by psiElement.getNode().getElementType().","We calculate the parent nodes of the leaf node by psiElement.getParent() until the file-level (i.e. PsiFile), and save them in the level element. In the previous example, the leaf node is PsiIdentifier:println, and its parent nodes are PsiReferenceExpression:System.out.println=> PsiMethodCallExpression:System.out.println(Hello world!)=> PsiExpressionStatement=> PsiCodeBlock=> PsiMethod:main=> PsiClass:Main. The original code text is","When the gaze point cannot be mapped to location in the code editor in the following 3 cases, the remark attribute is used:","x","x and y are the coordinates of the gaze relative to the top-left corner of the visible code editor, whose unit is same to the screen_size's in environment, not the actual screen resolution.","y"]},{"l":"Screen Recording","p":["video_clip_[k].mp4","Comment:","The video clip of the screen recording from the (k-1)-th pause (0-th pause is start) to the k-th pause. We designed this mechanism to avoid the video file in the memory being too large especially when pausing the tracking for a long time.","frames.csv","Column:","timestamp","frame_number","clip_number","Example:","frame_number is the frame number of the frame in its video clip.","clip_number is the number of the video clip to which the frame belongs."]}],[{"l":"Real-time Data API Reference"},{"l":"Overview","p":["We provide a real-time data API for future plugin developers and researchers to get the real-time data from IDE tracker and eye tracker separately. The API is based on the IDE Tracker and Eye Tracker."]},{"l":"Configuration","p":["Before using the API, you first need to add the following dependency to the intellij section in build.gradle.kts file."]},{"l":"Quick Start","p":["To use the API, simply call the getInstance() method to get the instance of the IDE Tracker or Eye Tracker. Then, set the isRealTimeDataTransmitting to true to enable the real-time data transmitting. After that, set the ideTrackerDataHandler or eyeTrackerDataHandler to handle the real-time data. Finally, call the startTracking() method to start tracking."]},{"l":"IDE Tracker"},{"i":"idetrackergetinstance","l":"IDETracker.getInstance()"},{"i":"setisrealtimedatatransmittingboolean-isrealtimedatatransmitting","l":"setIsRealTimeDataTransmitting(boolean isRealTimeDataTransmitting)"},{"i":"setidetrackerdatahandlerconsumerelement-idetrackerdatahandler","l":"setIdeTrackerDataHandler(ConsumerElement ideTrackerDataHandler)","p":["Element object is an XML element which is imported from org.w3c.dom.Element package."]},{"i":"starttrackingproject-project","l":"startTracking(Project project)"},{"l":"Eye Tracker"},{"i":"eyetrackergetinstance","l":"EyeTracker.getInstance()"},{"i":"setisrealtimedatatransmittingboolean-isrealtimedatatransmitting-1","l":"setIsRealTimeDataTransmitting(boolean isRealTimeDataTransmitting)"},{"i":"seteyetrackerdatahandlerconsumerelement-eyetrackerdatahandler","l":"setEyeTrackerDataHandler(ConsumerElement eyeTrackerDataHandler)"},{"i":"starttrackingproject-project-1","l":"startTracking(Project project)"}]]